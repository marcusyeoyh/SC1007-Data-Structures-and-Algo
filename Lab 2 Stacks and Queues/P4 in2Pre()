#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 1000 //The limit of expression length

typedef struct _stackNode{
    char item;
    struct _stackNode *next;
}StackNode;

typedef struct _stack{
   int size;
   StackNode *head;
}Stack;

void push(Stack *sPtr, char item);
int pop(Stack *sPtr);
char peek(Stack s);
int isEmptyStack(Stack s);

void in2Pre(char*, char*);

int main()
{
    char infix[SIZE];
    char prefix[SIZE];

    printf("Enter an infix expression:\n");
    scanf("%[^\n]%*c",infix);

    in2Pre(infix,prefix);
    printf("The prefix expression is \n");
    printf("%s\n",prefix);

    return 0;
}

void push(Stack *sPtr, char item){
    StackNode *newNode;
    newNode = malloc(sizeof(StackNode));
    newNode->item = item;
    newNode->next = sPtr->head;
    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack *sPtr){
    if(sPtr == NULL || sPtr->head == NULL){
        return 0;
    }
    else{
       StackNode *temp = sPtr->head;
       sPtr->head = sPtr->head->next;
       free(temp);
       sPtr->size--;
       return 1;
    }
}

char peek(Stack s){
    return s.head->item;
}

int isEmptyStack(Stack s){
     if(s.size == 0) return 1;
     else return 0;
}

int pres(char infix){ 
    if (infix == '*' || infix == '/'){ 
        return 1; 
    } 
    else if (infix == '+' || infix =='-'){ 
        return 0; 
    } 
    else{
        return 0;
    }
}

int isOperand(char infix){
    if(infix>='a' && infix<= 'z'){
        return 1;
    }
    else if (infix>='A' && infix>= 'Z'){
        return 1;
    }
    else if (infix>='0' && infix<= '9'){
        return 1;
    }
    else{
        return 0;
    }
}

void in2Pre(char* infix, char* prefix)
{
Stack *newStack;  
newStack->size = 0;  
newStack->head = NULL;  
char postfix[SIZE] = ""; 
postfix[0] = 0; 
prefix[0] = 0; 
char var1, var2, var3; 
 
for (int i = strlen(infix); i>=0 ;i--){  
    if (isOperand(infix[i]) == 1){  
        strncat(postfix, &infix[i], 1); 
        printf("%s\n",postfix); 
    }  
    else if(infix[i] == '('){  
        while (peek(*newStack)!=')'){  
            var1 = peek(*newStack);  
            strncat(postfix, &var1, 1);  
            pop(newStack);  
        }  
        pop(newStack);  
    }  
    else if (infix[i] == ')'){  
        push(newStack, infix[i]);  
    }  
    else{  
        while (isEmptyStack(*newStack) == 0 && peek(*newStack)!='(' && pres(peek(*newStack))>pres(infix[i])){  
            var2 = peek(*newStack);  
            strncat(postfix, &var2, 1);
            printf("%s\n",postfix);  
            pop(newStack);  
        }  
        push(newStack, infix[i]);  
    }  
}  
 
while (newStack->size != 0){  
    //printf("%c\n",peek(*newStack)); 
    var3 = peek(*newStack); 
    strncat(postfix, &var3, 1); 
    pop(newStack); 
     
}  
 
for (int j = strlen(postfix); j>=0; j--){ 
    strncat(prefix, &postfix[j], 1); 
} 
}
